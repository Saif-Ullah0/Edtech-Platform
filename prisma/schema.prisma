generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum ModuleType {
  TEXT
  VIDEO
  PDF
  QUIZ
}

// ðŸ†• NEW: Chapter types
enum ChapterType {
  TEXT
  VIDEO
  PDF
  QUIZ
}

model User {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  password  String
  role      Role         @default(USER)
  
  // ðŸ†• NEW: User status field (from ETP-001)
  status    String       @default("ACTIVE") // "ACTIVE", "BANNED", "DELETED"
  
  courses   Enrollment[] 
  orders    Order[]      
  createdAt DateTime     @default(now())
  
  // Module-wise payment relations
  moduleEnrollments ModuleEnrollment[]
  bundles           Bundle[]
  bundlePurchases   BundlePurchase[]
  
  // ðŸ†• NEW: Chapter progress tracking
  chapterProgress   ChapterProgress[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)
  courses     Course[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  slug        String   @unique
  description String
  price       Float
  imageUrl    String?
  isDeleted   Boolean  @default(false)
  
  // ðŸ†• NEW: Course publishing and pricing fields (from ETP-001)
  publishStatus String  @default("DRAFT")     // "DRAFT" or "PUBLISHED"
  isPaid        Boolean @default(false)       // true = paid course, false = free
  
  createdAt   DateTime @default(now())

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  notes       Note[]
  courseBundleItems CourseBundleItem[]

  modules     Module[]
  enrollments Enrollment[]
  orderItems  OrderItem[]  
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  
  // ðŸ†• ADD: Description field for better admin management
  description String?
  
  // ðŸ†• ADD: Slug for SEO-friendly URLs
  slug        String?    @unique
  
  type        ModuleType @default(TEXT)
  orderIndex  Int        @default(0)
  
  // Module pricing fields (keep these)
  price       Float      @default(0)
  isFree      Boolean    @default(false)
  isPublished Boolean    @default(false)
  
  // ðŸ†• ADD: Publishing status to match Course and Chapter
  publishStatus String   @default("DRAFT") // "DRAFT" or "PUBLISHED"
  
  notes       Note[]

  courseId    Int
  course      Course @relation(fields: [courseId], references: [id])
  
  chapters    Chapter[]
  
  // Existing relations
  moduleProgress ModuleProgress[]
  moduleEnrollments ModuleEnrollment[]
  bundleItems       BundleItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

// ðŸ†• NEW: Chapter model
model Chapter {
  id          String      @id @default(cuid())
  title       String
  description String?
  content     String?     // For text chapters
  videoUrl    String?     // For video chapters
  duration    Int?        // In seconds for videos
  order       Int         @default(0)
  type        ChapterType @default(TEXT)
  publishStatus String    @default("DRAFT") // "DRAFT" or "PUBLISHED"
  
  // Video-specific fields (moved from Module)
  videoSize     BigInt?
  videoDuration Int?
  thumbnailUrl  String?
  
  // REQUIRED: Chapter must belong to a module
  moduleId    Int
  module      Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // ðŸ†• NEW: Chapter progress tracking
  chapterProgress ChapterProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("chapters")
}

// ðŸ†• NEW: Chapter progress tracking
model ChapterProgress {
  id                   String    @id @default(cuid())
  userId               Int
  chapterId            String
  isCompleted          Boolean   @default(false)
  watchTime            Int       @default(0)
  completionPercentage Float     @default(0.0)
  completedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter              Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@map("chapter_progress")
}

// Individual module enrollments/purchases
model ModuleEnrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  moduleId  Int
  progress  Float    @default(0)
  completed Boolean  @default(false)
  
  // Payment tracking
  paymentTransactionId String?
  purchasePrice        Float
  purchaseDate         DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, moduleId])
  @@map("module_enrollments")
}

// User-created bundles
model Bundle {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  totalPrice  Float
  discount    Float    @default(0) // Percentage discount
  finalPrice  Float    // After discount
  
  // ðŸ†• NEW: Bundle type and promotional fields
  type        String   @default("MODULE") // "MODULE" or "COURSE"
  
  // Bundle status
  isActive    Boolean  @default(true)
  isPurchased Boolean  @default(false)
  
  // ðŸ†• NEW: Promotional fields
  isFeatured  Boolean  @default(false)  // Admin can mark as featured
  isPopular   Boolean  @default(false)  // Automatically determined by sales
  
  // ðŸ†• NEW: Analytics fields
  salesCount  Int      @default(0)      // Number of times purchased
  revenue     Float    @default(0)      // Total revenue generated
  viewCount   Int      @default(0)      // Number of times viewed
  
  // ðŸ†• NEW: Admin promotion fields
  featuredOrder Int?                    // Order in featured section (null = not featured)
  promotedUntil DateTime?               // Featured until this date
  
  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleItems  BundleItem[]      // Existing module items
  courseItems  CourseBundleItem[] // ðŸ†• NEW: Course items
  purchases    BundlePurchase[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("bundles")
}
model CourseBundleItem {
  id       Int @id @default(autoincrement())
  bundleId Int
  courseId Int
  
  // Relations
  bundle   Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([bundleId, courseId])
  @@map("course_bundle_items")
}
// Items in a bundle
model BundleItem {
  id       Int @id @default(autoincrement())
  bundleId Int
  moduleId Int
  
  // Relations
  bundle   Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([bundleId, moduleId])
  @@map("bundle_items")
}

model BundlePurchase {
  id                   Int      @id @default(autoincrement())
  bundleId             Int
  userId               Int
  paymentTransactionId String?
  purchasePrice        Float
  discount             Float
  finalPrice           Float
  
  // ðŸ†• NEW: Analytics fields
  bundleType           String   // "MODULE" or "COURSE"
  itemCount            Int      // Number of items in bundle
  
  // Relations
  bundle    Bundle @relation(fields: [bundleId], references: [id])
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("bundle_purchases")
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  content     String?
  fileUrl     String?
  fileName    String?
  fileSize    String?
  fileType    String?
  downloadCount Int    @default(0)
  isPublished Boolean  @default(false)
  orderIndex  Int      @default(0)
  
  // Relationships
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  moduleId    Int?
  module      Module?  @relation(fields: [moduleId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  
  @@map("notes")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  
  // Progress tracking fields
  progress     Float?   @default(0.0)
  lastAccessed DateTime @default(now()) @updatedAt
  
  // Payment tracking for course enrollments
  paymentTransactionId String?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  // Module progress relation
  moduleProgress ModuleProgress[]

  @@unique([userId, courseId])
}

// Module progress tracking (keep for backward compatibility)
model ModuleProgress {
  id                   Int       @id @default(autoincrement())
  enrollmentId         Int
  moduleId             Int
  isCompleted          Boolean   @default(false)
  watchTime            Int       @default(0)
  completionPercentage Float     @default(0.0)
  completedAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  enrollment           Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module               Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, moduleId])
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  items       OrderItem[]  
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  courseId  Int
  price     Float     
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
}