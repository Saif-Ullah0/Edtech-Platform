generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum ModuleType {
  TEXT
  VIDEO
  PDF
  QUIZ
}

model User {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  password  String
  role      Role         @default(USER)
  courses   Enrollment[] 
  orders    Order[]      
  createdAt DateTime     @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)
  courses     Course[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  slug        String   @unique
  description String
  price       Float
  imageUrl    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  modules     Module[]
  enrollments Enrollment[]
  orderItems  OrderItem[]  
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?    // Made optional since video modules might not have text content
  type        ModuleType @default(TEXT)
  orderIndex  Int        @default(0) // For ordering modules within a course
  
  // Video-specific fields
  videoUrl    String?    // Path to video file
  videoSize   BigInt?    // File size in bytes
  videoDuration Int?     // Duration in seconds
  thumbnailUrl String?   // Path to video thumbnail
  
  courseId    Int
  course      Course @relation(fields: [courseId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  items       OrderItem[]  
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  courseId  Int
  price     Float     
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
}