generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum ModuleType {
  TEXT
  VIDEO
  PDF
  QUIZ
}

model User {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  password  String
  role      Role         @default(USER)
  courses   Enrollment[] 
  orders    Order[]      
  createdAt DateTime     @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)
  courses     Course[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  slug        String   @unique
  description String
  price       Float
  imageUrl    String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  notes       Note[]   // Add this line

  modules     Module[]
  enrollments Enrollment[]
  orderItems  OrderItem[]  
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?    // Made optional since video modules might not have text content
  type        ModuleType @default(TEXT)
  orderIndex  Int        @default(0) // For ordering modules within a course
  
  // Video-specific fields
  videoUrl    String?    // Path to video file
  videoSize   BigInt?    // File size in bytes
  videoDuration Int?     // Duration in seconds
  thumbnailUrl String?   // Path to video thumbnail
  
  notes       Note[]   // Add this line

  courseId    Int
  course      Course @relation(fields: [courseId], references: [id])
  
  // Add relation to module progress
  moduleProgress ModuleProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}
model Note {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  content     String?  // For text notes
  fileUrl     String?  // For PDF files
  fileName    String?  // Original file name
  fileSize    String?  // File size in bytes
  fileType    String?  // pdf, txt, doc, etc.
  downloadCount Int    @default(0)
  isPublished Boolean  @default(false)
  orderIndex  Int      @default(0)
  
  // Relationships
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  moduleId    Int?     // Optional - can be associated with specific module
  module      Module?  @relation(fields: [moduleId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  
  @@map("notes")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  
  // Add progress tracking fields
  progress     Float?   @default(0.0)  // Overall course progress percentage
  lastAccessed DateTime @default(now()) @updatedAt  // When user last accessed the course

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  // Add relation to module progress
  moduleProgress ModuleProgress[]

  @@unique([userId, courseId])
}

// New model for tracking individual module progress
model ModuleProgress {
  id                   Int       @id @default(autoincrement())
  enrollmentId         Int
  moduleId             Int
  isCompleted          Boolean   @default(false)
  watchTime            Int       @default(0)        // in seconds
  completionPercentage Float     @default(0.0)      // percentage watched/read
  completedAt          DateTime?                    // when it was completed
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  enrollment           Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module               Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, moduleId])
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  status      OrderStatus  @default(PENDING)
  totalAmount Float
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  items       OrderItem[]  
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  courseId  Int
  price     Float     
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
}